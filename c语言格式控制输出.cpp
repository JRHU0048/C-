在C语言中，格式控制输出是通过使用`printf`函数和格式化字符串来实现的。格式化字符串包含了特殊的格式指定符，它们定义了如何格式化和输出数据。以下是一些常用的格式指定符及其用途：

1. `%d` 或 `%i`：用于输出十进制整数。
2. `%u`：用于输出无符号整数（unsigned int）。
3. `%f`：用于输出浮点数（float 或 double），默认显示6位小数。
4. `%lf`：用于输出双精度浮点数（double）。
5. `%e` 或 `%E`：用于输出科学计数法格式的浮点数。
6. `%g` 或 `%G`：根据数值的大小自动选择`%f`或`%e`。
7. `%x` 或 `%X`：用于输出十六进制整数（无符号整数）。
8. `%o`：用于输出八进制整数（无符号整数）。
9. `%s`：用于输出字符串。
10. `%c`：用于输出单个字符。
11. `%p`：用于输出指针的地址。
12. `%n`：用于记录到目前为止输出了多少字符，但不实际输出任何内容。

此外，你还可以使用一些修饰符来控制输出的精度、宽度、左对齐等：

- `.` 后跟数字：指定小数点后的位数（对于浮点数）或最小字段宽度（对于整数）。
- `*`：代替`.`后的数字，表示宽度由前面的参数指定。
- `-`：表示左对齐输出。
- `0`：表示如果宽度固定，整数前面填充0而不是空格。
- `+`：表示在有符号数前面总是显示正负号。

例如，以下是一个简单的`printf`函数调用，它使用了几种不同的格式指定符：

```c
#include <stdio.h>

int main() {
    int a = 10;
    unsigned int b = 20;
    float c = 3.14159;
    double d = 6.02e23;
    char str[] = "Hello, World!";

    printf("Integer: %d\n", a);
    printf("Unsigned Integer: %u\n", b);
    printf("Float: %.2f\n", c); // 显示两位小数
    printf("Double: %.10lf\n", d); // 显示十位小数
    printf("Hex: %x\n", b); // 显示十六进制
    printf("String: %s\n", str);
    printf("Character: %c\n", 'A'); // 输出字符'A'

    return 0;
}
```

这个程序会输出各种类型的数据，每种数据都按照指定的格式进行格式化。
